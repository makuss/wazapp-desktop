#!/usr/bin/python
# -*- coding: utf-8 -*-

import sip
sip.setapi('QString', 2)
from PyQt4.QtCore import QDir
from PyQt4.QtGui import QApplication, QIcon

import os
import signal
import sys
import argparse

base_dir = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.join(base_dir, 'src'))

def iconFromTheme(name, fallback=None):
    if QIcon.hasThemeIcon(name):
        return QIcon._fromTheme(name)
    if fallback is None:
        fallback = QIcon('icons:%s.png' % name)
    return fallback

def main():
    argParser = argparse.ArgumentParser()
    argParser.add_argument('--start-hidden', action='store_true', help='show only the notification icon')
    args = argParser.parse_args()

    from WazappDesktop.helpers import checkForYowsup, isAccountConfigured
    checkForYowsup()
    from WazappDesktop.Database import convertLegacyDatabases
    convertLegacyDatabases()
    from WazappDesktop.WazappDesktop import WazappDesktop

    app = QApplication(sys.argv)
    # add res dir to search path for 'icons:...' file names
    QDir.setSearchPaths('icons', [os.path.abspath(os.path.join(base_dir, 'res', 'icons'))])
    QDir.setSearchPaths('ui', [os.path.abspath(os.path.join(base_dir, 'res', 'ui'))])
    QDir.setSearchPaths('html', [os.path.abspath(os.path.join(base_dir, 'res', 'html'))])
    # monkey patch QIcon.fromTheme for a more useful fallback behavior
    QIcon._fromTheme = QIcon.fromTheme
    QIcon.fromTheme = staticmethod(iconFromTheme)

    # let ctrl-c exit Qt main loop and allow additional python code to run afterwards
    signal.signal(signal.SIGINT, lambda *args: app.exit(0))
    # force python interpreter to run every 500ms to process keyboard interrupt
    app.startTimer(500)
    app.timerEvent = lambda event: None

    if not isAccountConfigured():
        from WazappDesktop.RegistrationDialog import RegistrationDialog
        dialog = RegistrationDialog()
        dialog.exec_()
        dialog.close()

    if isAccountConfigured():
        gui = WazappDesktop()
        if not args.start_hidden:
            gui.show()
        return app.exec_()


if __name__ == '__main__':
    main()
